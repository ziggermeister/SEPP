#!/usr/bin/env python3
# Yahoo-only price+dividend fetchers

from __future__ import annotations

import datetime as dt
from typing import Dict, List, Tuple

import pandas as pd
import yfinance as yf


def _to_date(s):
    if s is None: return dt.date.today().isoformat()
    if isinstance(s, (dt.date, dt.datetime)): return s.strftime("%Y-%m-%d")
    return str(s)

def _clean(s: pd.Series) -> pd.Series:
    if s is None or not isinstance(s, pd.Series):
        return pd.Series(dtype=float)
    s = s.copy()
    s.index = pd.to_datetime(s.index).tz_localize(None)
    s = s.sort_index()
    s = s.loc[~s.index.duplicated(keep="last")]
    return s.astype(float)

def _mk_multi(prices: Dict[str, pd.Series], divs: Dict[str, pd.Series]) -> pd.DataFrame:
    frames = []
    for sym in sorted(prices.keys()):
        px = prices[sym].rename((sym, "Adj Close"))
        dv = divs.get(sym, pd.Series(0.0, index=px.index)).reindex(px.index).fillna(0.0).rename((sym, "Dividends"))
        frames.append(pd.concat([px, dv], axis=1))
    out = pd.concat(frames, axis=1) if frames else pd.DataFrame()
    if not out.empty:
        out.columns = pd.MultiIndex.from_tuples(out.columns, names=["Ticker", "Field"])
        out = out.sort_index()
    return out

def fetch_yahoo(symbols: List[str], start, end) -> Tuple[Dict[str, pd.Series], Dict[str, pd.Series]]:
    start, end = _to_date(start), _to_date(end)
    raw = yf.download(
        tickers=" ".join(symbols),
        start=start, end=end,
        auto_adjust=False, group_by="ticker",
        threads=True, progress=False, actions=True,
    )
    px: Dict[str, pd.Series] = {}
    dv: Dict[str, pd.Series] = {}
    for sym in symbols:
        if isinstance(raw.columns, pd.MultiIndex):
            if (sym, "Adj Close") not in raw.columns:
                continue
            adj = _clean(raw[(sym, "Adj Close")])
            div = _clean(raw[(sym, "Dividends")]) if (sym, "Dividends") in raw.columns else pd.Series(0.0, index=adj.index)
        else:
            # Single symbol mode fallback
            if "Adj Close" not in raw.columns:
                continue
            adj = _clean(raw["Adj Close"])
            div = _clean(raw["Dividends"]) if "Dividends" in raw.columns else pd.Series(0.0, index=adj.index)
        if not adj.empty:
            px[sym] = adj
            dv[sym] = div.reindex(adj.index).fillna(0.0)
    return px, dv

def fetch_prices_multi(
    symbols: List[str],
    start, end=None,
) -> pd.DataFrame:
    """
    Returns a MultiIndex DataFrame with columns:
      (Ticker, 'Adj Close') and (Ticker, 'Dividends')
    """
    px, dv = fetch_yahoo(symbols, start, end)
    if not px:
        raise ValueError("Yahoo returned no data for requested symbols/date range.")
    return _mk_multi(px, dv)
